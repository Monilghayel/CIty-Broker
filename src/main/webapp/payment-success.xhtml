<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:h="jakarta.faces.html"
  xmlns:f="jakarta.faces.core"
>
  <h:head>
    <title>Payment Successful - CityBroker</title>
    <h:outputStylesheet library="css" name="common.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      integrity="sha384-ENjdO4Dr2bkBIFxQpeoC54mNqAPZ9Ik1t6lFDD0DjW8U6M4kVXfX2Dk5I4ubnZl2"
      crossorigin="anonymous"
    />
    <style>
      body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      }

      .success-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 2rem;
      }

      .success-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
        padding: 3rem;
        text-align: center;
        max-width: 600px;
        width: 100%;
        animation: slideInUp 0.8s ease-out;
        position: relative;
        overflow: hidden;
      }

      .success-card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #28a745, #20c997, #17a2b8);
      }

      @keyframes slideInUp {
        from {
          transform: translateY(50px);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      .check-icon {
        width: 80px;
        height: 80px;
        background: linear-gradient(135deg, #28a745, #20c997);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 2rem;
        animation: pulse 2s infinite;
      }

      .check-icon i {
        font-size: 2.5rem;
        color: white;
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
          box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7);
        }
        70% {
          transform: scale(1.05);
          box-shadow: 0 0 0 20px rgba(40, 167, 69, 0);
        }
        100% {
          transform: scale(1);
          box-shadow: 0 0 0 0 rgba(40, 167, 69, 0);
        }
      }

      .success-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #28a745;
        margin-bottom: 1rem;
        animation: fadeIn 1s ease-out 0.3s both;
      }

      .success-message {
        font-size: 1.2rem;
        color: #6c757d;
        margin-bottom: 2rem;
        line-height: 1.6;
        animation: fadeIn 1s ease-out 0.5s both;
      }

      .transaction-details {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 2rem 0;
        animation: fadeIn 1s ease-out 0.7s both;
      }

      .detail-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
        padding: 0.5rem 0;
        border-bottom: 1px solid #e9ecef;
      }

      .detail-row:last-child {
        border-bottom: none;
        margin-bottom: 0;
      }

      .detail-label {
        font-weight: 600;
        color: #495057;
      }

      .detail-value {
        font-weight: 700;
        color: #28a745;
      }

      .status-badge {
        display: inline-block;
        padding: 0.5rem 1rem;
        border-radius: 25px;
        font-weight: 600;
        font-size: 0.9rem;
        margin: 1rem 0;
      }

      .status-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }

      .status-warning {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
      }

      .action-buttons {
        margin-top: 2rem;
        animation: fadeIn 1s ease-out 0.9s both;
      }

      .btn-modern {
        padding: 12px 30px;
        border-radius: 25px;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
      }

      .btn-primary-modern {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
      }

      .btn-primary-modern:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        color: white;
      }

      .btn-success-modern {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
      }

      .btn-success-modern:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(40, 167, 69, 0.3);
        color: white;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .confetti {
        position: absolute;
        width: 10px;
        height: 10px;
        background: #28a745;
        animation: confetti-fall 3s linear infinite;
      }

      @keyframes confetti-fall {
        0% {
          transform: translateY(-100vh) rotate(0deg);
          opacity: 1;
        }
        100% {
          transform: translateY(100vh) rotate(720deg);
          opacity: 0;
        }
      }
    </style>
  </h:head>

  <h:body>
    <div class="success-container">
      <div class="success-card">
        <!-- Confetti Animation -->
        <div class="confetti" style="left: 10%; animation-delay: 0s"></div>
        <div
          class="confetti"
          style="left: 20%; animation-delay: 0.5s; background: #20c997"
        ></div>
        <div
          class="confetti"
          style="left: 30%; animation-delay: 1s; background: #17a2b8"
        ></div>
        <div
          class="confetti"
          style="left: 40%; animation-delay: 1.5s; background: #ffc107"
        ></div>
        <div
          class="confetti"
          style="left: 50%; animation-delay: 2s; background: #dc3545"
        ></div>
        <div
          class="confetti"
          style="left: 60%; animation-delay: 0.3s; background: #6f42c1"
        ></div>
        <div
          class="confetti"
          style="left: 70%; animation-delay: 0.8s; background: #fd7e14"
        ></div>
        <div
          class="confetti"
          style="left: 80%; animation-delay: 1.3s; background: #e83e8c"
        ></div>
        <div
          class="confetti"
          style="left: 90%; animation-delay: 1.8s; background: #20c997"
        ></div>

        <!-- Success Icon -->
        <div class="check-icon">
          <i class="fas fa-check"></i>
        </div>

        <!-- Success Title -->
        <h1 class="success-title">Payment Successful!</h1>

        <!-- Success Message -->
        <p class="success-message">
          Thank you for your payment! Your service charges have been processed
          successfully.
        </p>

        <!-- Transaction Details -->
        <div class="transaction-details">
          <div class="detail-row">
            <span class="detail-label">User ID:</span>
            <span class="detail-value">#{userBean.selectedUser.name}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Amount Paid:</span>
            <span class="detail-value">â‚¹ #{paymentSuccessBean.amount}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Payment Date:</span>
            <span class="detail-value"
              >#{paymentSuccessBean.transactionRecorded ? 'Recorded' :
              'Processing'}</span
            >
          </div>
        </div>

        <!-- Transaction Status -->
        <h:panelGroup
          rendered="#{paymentSuccessBean.transactionRecorded and not paymentSuccessBean.alreadyProcessed}"
        >
          <div class="status-badge status-success">
            <i class="fas fa-database me-2"></i>
            Transaction Recorded Successfully
          </div>
        </h:panelGroup>

        <h:panelGroup rendered="#{paymentSuccessBean.alreadyProcessed}">
          <div class="status-badge status-success">
            <i class="fas fa-check-circle me-2"></i>
            Payment Already Processed
          </div>
        </h:panelGroup>

        <h:panelGroup rendered="#{not paymentSuccessBean.transactionRecorded}">
          <div class="status-badge status-warning">
            <i class="fas fa-exclamation-triangle me-2"></i>
            Payment Successful - Transaction Recording Pending
          </div>
        </h:panelGroup>

        <!-- Action Buttons -->
        <div class="action-buttons">
          <h:link
            outcome="profile.xhtml"
            styleClass="btn-modern btn-success-modern me-3"
          >
            <i class="fas fa-user"></i>
            Back to Profile
          </h:link>
          <h:link
            outcome="index.xhtml"
            styleClass="btn-modern btn-primary-modern"
          >
            <i class="fas fa-home"></i>
            Go to Home
          </h:link>
        </div>
      </div>
    </div>

    <script>
      // Add some interactive effects
      document.addEventListener("DOMContentLoaded", function () {
        // Add click effect to buttons
        const buttons = document.querySelectorAll(".btn-modern");
        buttons.forEach((button) => {
          button.addEventListener("click", function (e) {
            // Create ripple effect
            const ripple = document.createElement("span");
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;

            ripple.style.width = ripple.style.height = size + "px";
            ripple.style.left = x + "px";
            ripple.style.top = y + "px";
            ripple.classList.add("ripple");

            this.appendChild(ripple);

            setTimeout(() => {
              ripple.remove();
            }, 600);
          });
        });
      });
    </script>
  </h:body>
</html>
